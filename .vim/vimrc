syntax on
filetype plugin indent on
set nocompatible
set wrap
set breakindent
set breakindentopt=sbr
set linebreak
set showbreak=↪
set display+=lastline
set tabstop=4 expandtab shiftwidth=4 smarttab
set list lcs=tab:\│\ 
set number relativenumber
set mouse= " Don't allow mouse
set ruler " Display cursor
set cursorline " cursorcolumn
set hlsearch " Highlighted search results
set showcmd " Display (partially) the command in the last line of the screen
set cmdheight=1
set backspace=indent,eol,start " Backspacing over every character in insert mode
set autoindent
set ignorecase
" set noshowmode " no status bar
" set scrolloff=8
set scrolloff=999
set splitbelow splitright
set timeoutlen=1000 ttimeoutlen=0 " remove escape delay
" set colorcolumn=80
autocmd BufEnter * :syntax sync fromstart

" function! ColorLine(mode)
" 	if a:mode == 'i'
" 		hi User5 ctermfg=7 ctermbg=27
" 	elseif a:mode == 'r'
" 		hi User5 ctermfg=7 ctermbg=124
" 	else
" 		hi User5 ctermfg=7 ctermbg=20
" 	endif
" endfunction

" au InsertEnter * call ColorLine(v:insertmode)
" au InsertLeave * hi User5 guibg=Black ctermfg=6 guifg=White ctermbg=0

" hi User5 guibg=Black ctermfg=14 guifg=White ctermbg=0
" hi User2 guibg=Black ctermfg=0 guifg=White ctermbg=2
" hi User3 guibg=Black ctermfg=7 guifg=White ctermbg=2
" 
" hi StatusLine guibg=Black ctermfg=6 guifg=White ctermbg=0
" hi StatusLineNC guibg=Black ctermfg=235 guifg=White ctermbg=0

" Formats the statusline
set statusline=%#PmenuSel#
set statusline+=\ %f      " file name
set statusline+=\ %m      "modified flag
set statusline+=\ %r      "read only flag
set statusline+=%#CursorLine#

set statusline+=%=
" set statusline+=\ [%{mode()}]
set statusline+=%y      "filetype
set statusline+=\ \|\ 
set statusline+=%{strlen(&fenc)?&fenc:'none'} "file encoding
set statusline+=\ \|\ 
set statusline+=%{&ff} "file format
set statusline+=\ \|\ 
set statusline+=%l:%c\ /\ %L\ 
set laststatus=2

set tabline=%!MyTabLine()

function MyTabLine()
	let s = ''
	for i in range(tabpagenr('$'))
		let s.= ' '
		" select the highlighting
		if i + 1 == tabpagenr()
			let s .= '%#TabLineSel#'
		else
			let s .= '%#TabLine#'
		endif

		" set the tab page number (for mouse clicks)
		let s .= '%' . (i + 1) . 'T'

		" the label is made by MyTabLabel()
		let s .= '%{MyTabLabel(' . (i + 1) . ')}'
	endfor

	" after the last tab fill with TabLineFill and reset tab page nr
	let s .= '%#TabLineFill#%T'

	" right-align the label to close the current tab page
	" if tabpagenr('$') > 1
	" 	let s .= '%=%#TabLine#%999Xclose'
	" endif

	return s
endfunction

function MyTabLabel(n)
	let buflist = tabpagebuflist(a:n)
	let winnr = tabpagewinnr(a:n)
	if (bufname(buflist[winnr - 1]) == "")
		return " new buffer "
	endif
	return " ".bufname(buflist[winnr - 1])." "
endfunction



set fillchars=vert:\|



call plug#begin('~/.vim/plugged')

" Plug 'itchyny/lightline.vim'
Plug 'dylanaraps/fff.vim'
Plug 'sheerun/vim-polyglot'
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'Yggdroot/indentLine'
Plug 'machakann/vim-highlightedyank'
Plug 'pseewald/vim-anyfold'
Plug 'josephobriot/vim-cursorlight'
Plug 'idanarye/vim-dutyl'
" Plug 'rhysd/clever-f.vim'
" Plug 'Raimondi/delimitMate'
Plug 'machakann/vim-sandwich'
" Plug 'christoomey/vim-system-copy' problem is that the keybinding cp isn't removable and I'm lazy
Plug 'wellle/targets.vim'
Plug 'dhruvasagar/vim-table-mode'
Plug 'ciaranm/detectindent'
Plug 'junegunn/vim-peekaboo'
Plug 'majutsushi/tagbar'

call plug#end()

" let g:lightline = {
"       \ 'colorscheme': 'wombat',
"       \ }

" let delimitMate_expand_cr = 2
" let delimitMate_expand_space = 1

inoremap <F2> <esc>:TableModeToggle<CR>li
nnoremap <F2> :TableModeToggle<CR>
nmap <F8> :TagbarToggle<CR>

let g:detectindent_preferred_indent = 4
let g:detectindent_preferred_when_mixed = 1
autocmd BufEnter * DetectIndent

let g:polyglot_disabled = ['markdown']

let g:clever_f_across_no_line = 1
let g:indentLine_char = '¦'
" Open fff
nnoremap , :F<CR>
" Open fzf
noremap . :FZF<CR>
" let g:fzf_layout = { 'down': '~20%' }
" Vertical split (NERDtree style).
let g:fff#split = "30vnew"

" ; to enter commands, so I don't need shift
nmap ; :
vmap ; :

nnoremap k gk
nnoremap j gj

nnoremap <F1> :noh<CR>

" space open/close folds in normal mode
nnoremap <space> za
" space create folds in visual mode
vnoremap <space> <ESC>:set foldmethod=manual<CR>gvzf

" Alt arrow to navigate
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

" Alt shift arrow to resize
nmap <A-S-Right> :vertical resize +10<CR>
nmap <A-S-Left> :vertical resize -10<CR>
nmap <A-S-Up> :resize +10<CR>
nmap <A-S-Down> :resize -10<CR>


" line up or down
nnoremap <C-j> mz:m +1<CR>`z==
nnoremap <C-k> mz:m -2<CR>`z==
inoremap <C-j> <Esc>:m +1<CR>==gi
inoremap <C-k> <Esc>:m -2<CR>==gi
vnoremap <C-j> :m'>+<CR>gv=`<my`>mzgv`yo`z
vnoremap <C-k> :m'<-2<CR>gv=`>my`<mzgv`yo`z

" copy to clipboard
vmap <F6> :!xclip -f -sel clip<CR>


autocmd Filetype * AnyFoldActivate
set foldlevel=99


" Jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

autocmd ColorScheme * highlight Normal ctermbg=0 guibg=NONE
autocmd ColorScheme * highlight VertSplit ctermfg=fg ctermbg=bg guibg=NONE guifg=NONE
autocmd ColorScheme * highlight WildMenu ctermfg=7 ctermbg=0 guibg=NONE guifg=NONE
autocmd ColorScheme * highlight LineNr ctermbg=0 ctermfg=238 guibg=NONE
autocmd ColorScheme * highlight CursorLineNr ctermbg=0 ctermfg=248 guibg=NONE
autocmd ColorScheme * highlight Folded ctermbg=249 ctermfg=236 guibg=NONE guifg=NONE
autocmd ColorScheme * highlight EndOfBuffer cterm=NONE ctermbg=bg

autocmd ColorScheme * highlight MatchParen ctermbg=242 ctermfg=202
autocmd ColorScheme * highlight Search ctermbg=242 ctermfg=196

autocmd ColorScheme * highlight TabLine cterm=NONE ctermbg=bg ctermfg=fg
autocmd ColorScheme * highlight TabLineFill cterm=NONE ctermbg=bg ctermfg=fg

autocmd ColorScheme * highlight PmenuSel ctermbg=0 ctermfg=2

let g:CursorLightenFactor = 30

augroup BgHighlight
	autocmd!
	" autocmd WinEnter * set colorcolumn=80
	" autocmd WinLeave * set colorcolumn=0
	autocmd WinEnter * set cul
	autocmd WinLeave * set nocul
augroup END

set background=dark
" colorscheme palenight
" colorscheme mysticaltutor
colorscheme kuroi


" Resize panes whenever containing window resized.
autocmd VimResized * wincmd =

" Better backup, swap and undos storage
set backup                        " make backup files
set undofile                      " persistent undos - undo after you re-open the file
set directory=~/.vim/dirs/tmp     " directory to place swap files in
set backupdir=~/.vim/dirs/backups " where to put backup files
set undodir=~/.vim/dirs/undodir   " undo directory


" Don't you f'in touch my cursor
set guicursor=

" Save as sudo
ca w!! w !sudo tee "%"



" auto force fixed dark background if cterm0 is too light

let s:background = ""
function! UpdateBg(manual)
	if ($TERM == "xterm-256color" && $DISPLAY != "")
		let s:color0 = system("xrdb -query | grep '*.color0:' | awk '{print $2}'")

		let s:colors = ['0x'.s:color0[1:2], '0x'.s:color0[3:4], '0x'.s:color0[5:6]]
		if (s:background != s:color0)
			let s:background = s:color0
			if (s:colors[0] + s:colors[1] + s:colors[2]) / 3 > 128
				" call ForceDark(0)
				set background=light
				colorscheme papercolor
				let g:EnableCursorDarken = 1
				if a:manual == 1
					call g:CursorShadow()
					exec "highlight TabLineSel cterm=NONE ctermbg=". g:DarkenColor("0", 100, "term") ." ctermfg=0"
				else
					let s:bufopen = 0
					augroup AfterRc
						autocmd BufEnter * let s:bufopen += 1
						autocmd BufEnter * exec "highlight TabLineSel cterm=NONE ctermbg=". g:DarkenColor("0", 100, "term") ." ctermfg=0"
						autocmd BufEnter * if s:bufopen > 1 | autocmd! AfterRc | endif
					augroup END
				endif
			else
				set background=dark
				colorscheme kuroi
				let g:EnableCursorDarken = 1
				unlet g:EnableCursorDarken
				if a:manual == 1
					call g:CursorLight()
					exec "highlight TabLineSel cterm=NONE ctermbg=". g:LightenColor("0", 100, "term") ." ctermfg=0"
				else
					let s:bufopen = 0
					augroup AfterRc
						autocmd BufEnter * let s:bufopen += 1
						autocmd BufEnter * exec "highlight TabLineSel cterm=NONE ctermbg=". g:LightenColor("0", 100, "term") ." ctermfg=0"
						autocmd BufEnter * if s:bufopen > 1 | autocmd! AfterRc | endif
					augroup END
				endif
			endif
		endif
	endif
endfunction

call UpdateBg(0)

nnoremap <F5> :call UpdateBg(1)<CR>
